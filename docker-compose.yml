version: "2.4"

services:
  dev:
    image: viewiq/restapi-dev:${BUILD_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    environment:
      ALLOWED_HOSTS: api
      RABBITMQ_HOST: rabbitmq
      DB_HOST: pg
      DB_USER: postgres
      DB_PASSWORD: password
      AUDIT_DB_HOST: pg_audit
      AUDIT_DB_USER: postgres
      AUDIT_DB_PASSWORD: password
      ELASTIC_SEARCH_URLS: es
      ELASTIC_SEARCH_USE_SSL: 0
      CELERY_RESULT_BACKEND: elasticsearch://es:9200/celery/task_result
      APM_ENABLED: ${APM_ENABLED:-False}
      APM_SERVER_URL: ${APM_SERVER_URL:-http://apm-server:8200}
  api:
    command: ["python","./manage.py", "runserver", "0.0.0.0:5000"]
    extends:
      service: dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      pg:
        condition: service_healthy
      pg_audit:
        condition: service_healthy
      es:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --silent localhost:5000/api/healthcheck/status/ || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 2m

  celery_worker:
    image: viewiq-restapi
    command: ["celery", "-A", "saas", "worker", "-l", "info", "-Q",
              "celery,reports,delivery_statistic,email_reports,export,transcripts,hourly_statistic,cache_research,segments,
              schedulers,brand_safety_channel_light,brand_safety_channel_priority,brand_safety_video_priority,ias,performiq"
    ]
    depends_on:
      - rabbitmq
      - pg
      - redis
      - es
    environment:
      RABBITMQ_HOST: rabbitmq
      DB_HOST: pg
      DB_USER: postgres
      DB_PASSWORD: password
      ELASTIC_SEARCH_URLS: es
      ELASTIC_SEARCH_USE_SSL: 0

  celery_beat:
    image: viewiq-restapi
    command: ["celery", "-A", "saas", "beat", "-l", "info"]
    depends_on:
      - rabbitmq
    environment:
      RABBITMQ_HOST: rabbitmq
      ELASTIC_SEARCH_URLS: es
      DO_SALESFORCE_UPDATE: 0

  pg:
    image: postgres:12.4
    environment:
      POSTGRES_DB: saas
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg_audit:
    image: postgres:12.4
    environment:
      POSTGRES_DB: audit
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  es:
    image: elasticsearch:7.9.1
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  rabbitmq:
    image: viewiq/rabbitmq
    build:
      context: ./.docker/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:5.0.4
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    image: iserko/docker-celery-flower
    environment:
      CELERY_BROKER_URL: amqp://rabbitmq/restapi

  kibana:
    image: kibana:7.9.1
    environment:
      ELASTICSEARCH_HOSTS: http://es:9200

  # APM
  apm-es:
    image: docker.elastic.co/elasticsearch/elasticsearch:${APM_STACK_VERSION:-7.7.0}
    environment:
      - cluster.name=docker-cluster
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - path.data=/usr/share/elasticsearch/data/${APM_STACK_VERSION:-7.7.0}
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      retries: 10
      interval: 20s

  apm-server:
    image: docker.elastic.co/apm/apm-server:${APM_STACK_VERSION:-7.7.0}
    command: >
      apm-server -e
        -E apm-server.frontend.enabled=true
        -E apm-server.frontend.rate_limit=100000
        -E apm-server.host=0.0.0.0:8200
        -E apm-server.read_timeout=1m
        -E apm-server.shutdown_timeout=2m
        -E apm-server.write_timeout=1m
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E xpack.monitoring.elasticsearch=true
        -E output.elasticsearch.enabled=${APM_SERVER_ELASTICSEARCH_OUTPUT_ENABLED:-true}
        -E output.elasticsearch.hosts=apm-es:9200
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    depends_on:
      - apm-es
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://apm-server:8200/"]
      retries: 10
      interval: 10s
  apm-kibana:
    image: docker.elastic.co/kibana/kibana:${APM_STACK_VERSION:-7.7.0}
    environment:
      SERVER_NAME: kibana.example.org
      ELASTICSEARCH_HOSTS: http://apm-es:9200
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://apm-kibana:5601/"]
      retries: 10
      interval: 10s
    depends_on:
      - apm-es
