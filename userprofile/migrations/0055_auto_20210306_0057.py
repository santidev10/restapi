# Generated by Django 3.1.6 on 2021-03-06 00:57

from django.db import migrations
from userprofile.constants import StaticPermissions


BUILD__CTL_CREATE = "build.ctl_create"
BUILD__CTL_DELETE = "build.ctl_delete"

old_perms = [BUILD__CTL_CREATE, BUILD__CTL_DELETE]

new_perms_by_old_perms = {
    BUILD__CTL_CREATE: [StaticPermissions.BUILD__CTL_CREATE_VIDEO_LIST,
                        StaticPermissions.BUILD__CTL_CREATE_CHANNEL_LIST],
    BUILD__CTL_DELETE: [StaticPermissions.BUILD__CTL_DELETE_VIDEO_LIST,
                        StaticPermissions.BUILD__CTL_DELETE_CHANNEL_LIST]
}


def add_segment_type_permission(apps, schema_editor):
    """
    for each user, we'll remove the old perm with pop, and set all of the new split perms to the same value and
    save each modified user. This assumes that admin will remove segment type perms for users that shouldn't have them.
    :param apps:
    :param schema_editor:
    :return:
    """
    UserProfile = apps.get_model("userprofile", "UserProfile")
    for user in UserProfile.objects.all():
        user_perms = user.perms
        new_user_perms = {}
        for old_perm in old_perms:
            value = user_perms.pop(old_perm, None)
            if value is None:
                continue
            new_perms = new_perms_by_old_perms.get(old_perm)
            for new_perm in new_perms:
                new_user_perms[new_perm] = value

        if new_user_perms:
            user_perms.update(new_user_perms)
            user.perms = user_perms
            user.save(update_fields=["perms"])


class Migration(migrations.Migration):

    dependencies = [
        ('userprofile', '0054_auto_20210305_1656'),
    ]

    operations = [
        migrations.RunPython(add_segment_type_permission),
    ]
